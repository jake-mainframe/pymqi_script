JAKES GUIDE TO PENTESTING MQ

JAKES GUIDE TO MQ CHANNELS
CHLTYPE(SVRCONN) / CHLTYPE(RCVR) - CHLTYPE(SVRCONN) can use pymqi, CHLTYPE(RCVR) need to create a queue manager with a SENDER channel with the same, then define remote queues to access it
SSLCIPH() - SSL is turned off
SSLAUTH()/SSLAUTH(REQUIRED) - you must present a client certificate if SSL is on
SSLAUTH(OPTIONAL) - this means that you can just not send a certificate, you will still need to add the server certificate to your trusted CA's
SSLPEER(XXXXX) If it is not blank it will check the common name of the certificate else it will accept any certificate signed by a CA in the SSLKEYR
MCAUSER(XXXXX) is the username the channel will use if you dont send it a username and password 
CHLAUTH might prevent any vulns you find here

JAKES GUIDE TO CHLAUTH
CHLAUTH(*) USERSRC(NOACCESS)  ADDRESS(*) TYPE(ADDRESSMAP) Back-stop to block all users unless explicitly granted access
CHLAUTH(SYSTEM.ADMIN.SVRCONN) ADDRESS(*) CLNTUSER(jake) MCAUSER(mqm) TYPE(USERMAP) - if a user authenticates as jake, they become mqm
if possible address should be limited to certain IPs
CHCKCLNT(ASQMGR) - Means use default authinfo 

JAKES GUIDE TO AUTHINFO
SYSTEM.DEFAULT.AUTHINFO.IDPWOS - Using the underlying OS authentication
CHCKCLNT(REQUIRED) - Users need to send CONAUTH_INFO
CHCKCLNT(OPTIONAL/NONE) - MQ will trust the USERID_INFO it gets, dont send CONAUTH_INFO, MQ client will send your current username (just set your username to whoever you want to be)
If you can become mqm and its not z/OS, you have unauth rce if the MCAUSER is BLANK
CHCKCLNT(REQDADM) - Admins need to send CONAUTH_INFO, others dont, means you can get application data

JAKES GUIDE TO UNIX MQ ADMIN
runmqsc - mq console
dis chlauth(*) all
dis channel(*) all
dis authinfo(*) all
dis authrec entity - if you have access to a user see what it can do

Interact with MQ
mainframe@ubuntu:/opt/mqm/samp$ export MQSERVER=DEV.APP.SVRCONN/TCP/'127.0.0.1(1414)'
mainframe@ubuntu:/opt/mqm/samp$ /opt/mqm/samp/bin/amqsgbr DEV.QUEUE.1 QM1

read KDB
runmqckm -cert -list personal -db server_cert.kdb -type PKCS12 -stashed
runmqckm -cert -details -label qm1.cert  -db server_cert.kdb -type PKCS12 -stashed
